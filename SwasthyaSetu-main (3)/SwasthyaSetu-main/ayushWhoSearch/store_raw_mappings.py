import os
import psycopg2
import psycopg2.extras
import pandas as pd
from dotenv import load_dotenv

# --- Configuration ---
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

# CSV generated by semantic mapping
SUGGESTED_MAPPINGS_CSV = "candidate_mappings_semantic_v2.csv"

# Column names in the generated CSV
CSV_AYUSH_CODE_COL = "AYUSH_Code"
CSV_WHO_CODE_COL = "WHO_Code_Candidate"
CSV_WHO_TERM_COL = "WHO_Term_Candidate"
CSV_TARGET_SYSTEM_COL = "Target_System"
CSV_RELATIONSHIP_COL = "Suggested_Relationship"

# Import AI generator from generate_mappings.py
try:
    from generate_mappings import generate_ai_mappings
except ImportError:
    generate_ai_mappings = None


def load_suggested_mappings():
    """
    Reads the raw suggested mappings CSV and populates the 'mappings' table.
    """
    # Step 1. Ensure CSV exists
    if not os.path.exists(SUGGESTED_MAPPINGS_CSV):
        if generate_ai_mappings:
            print("ü§ñ Running AI mapping generator since CSV not found...")
            generate_ai_mappings()  # this will create candidate_mappings_semantic_v2.csv
        else:
            print(f"‚ùå ERROR: '{SUGGESTED_MAPPINGS_CSV}' not found and no AI generator available.")
            return

    # Step 2. Read CSV
    print(f"üìñ Reading raw suggested mappings from '{SUGGESTED_MAPPINGS_CSV}'...")
    try:
        df = pd.read_csv(SUGGESTED_MAPPINGS_CSV, dtype=str).fillna('')
        df.dropna(subset=[CSV_AYUSH_CODE_COL, CSV_WHO_CODE_COL, CSV_RELATIONSHIP_COL], inplace=True)
        print(f"‚úÖ Found {len(df)} suggested mappings in the CSV file.")
    except Exception as e:
        print(f"‚ùå ERROR while reading CSV: {e}")
        return

    # Step 3. Fetch AYUSH code IDs
    print("üìö Fetching internal IDs for AYUSH codes from the database...")
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT id, code FROM codes")
        ayush_code_to_id = {row[1]: row[0] for row in cursor.fetchall()}
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"‚ùå Database error while fetching AYUSH codes: {e}")
        return

    # Step 4. Prepare data for insertion
    data_to_insert = []
    for index, row in df.iterrows():
        ayush_code = row[CSV_AYUSH_CODE_COL]
        who_code = row[CSV_WHO_CODE_COL]
        who_term = row[CSV_WHO_TERM_COL]
        target_system = row[CSV_TARGET_SYSTEM_COL]
        relationship = row[CSV_RELATIONSHIP_COL]

        source_code_id = ayush_code_to_id.get(ayush_code)

        if source_code_id:
            data_to_insert.append((source_code_id, target_system, who_code, who_term, relationship))
        else:
            print(f"‚ö†Ô∏è Warning: Could not find AYUSH code '{ayush_code}' in the database. Skipping.")

    # Step 5. Insert into DB
    print(f"üöÄ Prepared {len(data_to_insert)} mappings for database insertion.")
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        print("üßπ Clearing old data from the 'mappings' table...")
        cursor.execute("TRUNCATE TABLE mappings RESTART IDENTITY")

        insert_query = """
            INSERT INTO mappings (source_code_id, target_code_system, target_code, target_display, relationship)
            VALUES (%s, %s, %s, %s, %s)
        """
        psycopg2.extras.execute_batch(cursor, insert_query, data_to_insert)

        conn.commit()
        print(f"‚úÖ Successfully inserted {len(data_to_insert)} suggested mappings into the database.")
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"‚ùå Database population failed: {e}")


if __name__ == "__main__":
    load_suggested_mappings()
    print("\nüéâ Your database now contains all the raw, computer-generated mapping suggestions.")
